syntax = "proto3";

package com.gradido.proto;

import "BasicTypes.proto";
import "Timestamp.proto";
import "Transaction.proto";

message Ack {
    bool success = 1;
}

message PubkeyEntity {
    bytes pub_key = 1;
}

message DateMonth {
    uint32 year = 1;
    uint32 month = 2;
}

message SignaturePair {
    bytes pub_key = 1;  
    // TODO: simplify
    oneof signature {
        bytes ed25519 = 2; // ed25519 signature (libsodium default)
		bytes ed25519_ref10 = 3; // ed25519 ref10 signature
    }
    uint32 signed_signatures = 4; // how many signatures were 
                                  // part of material
    uint32 signed_body_bytes_size = 5; // how large was 
                                       // body_bytes when signed
}

message SignatureMap {
    repeated SignaturePair sig_pair = 1; // Each signature pair corresponds to a unique Key required to sign the transaction.
}

message Amount {
	bytes pubkey = 1;
	double amount = 2;
}

message LocalTransfer {
    Amount sender = 1;
    bytes receiver = 2;
}

message CrossGroupTransfer {
    Amount sender = 1;
    bytes receiver = 2;
    bytes other_group = 3;
    // this matches related OutboundTransfer.paired_transaction_id
    .proto.Timestamp paired_transaction_id = 4;
}

message GradidoTransfer {
    oneof data {
        LocalTransfer local = 1;
        CrossGroupTransfer inbound = 2;
        CrossGroupTransfer outbound = 3;
    }
}

message GroupFriendsUpdate {
    // char[16], alias
    bytes group = 1;
    
    enum Action {
        ADD_FRIEND=0;
        REMOVE_FRIEND=1;
    };
    Action action = 2;
}

message GroupMemberUpdate {
    bytes user_pubkey = 1;

    enum MemberUpdateType {
        ADD_USER=0;
        MOVE_USER_INBOUND=1;
        MOVE_USER_OUTBOUND=2;
    };
    MemberUpdateType member_update_type = 2;

    // this only makes sense for user move, TODO: probably restructure
    .proto.Timestamp paired_transaction_id = 3;
    bytes target_group = 4;
}

message GradidoCreation {
    Amount receiver = 1; 
    DateMonth target_date = 2;
}

message DebugResetBlockchainMark {
    bool do_reset = 1;
}

message GradidoHeader {
    string alias = 1;
    repeated bytes ca_chain = 2;
    bytes ordering_node = 3;
}

message TransactionBody {
	string memo = 1; // max 150 chars
	uint64 version_number = 2; // deprecated

	oneof data {
        GradidoTransfer transfer = 3;
		GradidoCreation creation = 4;
        GroupFriendsUpdate group_friends_update = 5;
        GroupMemberUpdate group_member_update = 6;

        DebugResetBlockchainMark debug_reset_blockchain_mark = 7; // deprecated

        GradidoHeader header = 8;
        PubkeyEntity add_admin = 9;
        PubkeyEntity remove_admin = 10;
        PubkeyEntity add_node = 11;
        PubkeyEntity remove_node = 12;
        Ack initialization_done = 13;
	}
}


message GradidoTransaction {
	SignatureMap sig_map = 1;

    // TODO: consider if having concrete type wouldn't be better; 
    // having bytes would better show what is signed, still for 
    // blockchain it doesn't matter, as it has to be serialized again
    // when validating
	// UNICORN ANSWER:
	// Maybe but hedera has at first concrete type and has depracted that now, so is must 
	// be reason for that
	bytes body_bytes = 2; // TransactionBody
}

message AddAdmin {
    bytes pub_key = 1;
    string name = 2;
    string email = 3;
}

message NodeBlockchain {
    bytes node_pub_key = 1;
    bytes blockchain_pub_key = 2;
}

message AddNode {
    string type = 1;
    bytes pub_key = 2;
}

message AddBlockchain {
    bytes pub_key = 1;
    string alias = 2;    
}

message SbTransaction {
    string memo = 1;
    oneof data {
        AddAdmin add_admin = 2;
        PubkeyEntity disable_admin = 3;
        PubkeyEntity enable_admin = 4;
        AddNode add_node = 5;
        PubkeyEntity disable_node = 6;
        PubkeyEntity enable_node = 7;

        AddBlockchain add_blockchain = 8;
        NodeBlockchain add_node_to_blockchain = 9;
        NodeBlockchain remove_node_from_blockchain = 10;
    }
}

message AddGroupToRegister {
    bytes alias = 1;
    .proto.TopicID topic_id = 2;
    bool reset_group_register = 3; // for debugging purposes only
}

message ManageGroupRequest {
    enum Action {
         ADD_GROUP = 0;
         REMOVE_GROUP = 1;
    }
    Action action = 1;
    bytes group = 2;
}

message BlockchainId {
    oneof id {
        bytes pub_key = 1;
        string group = 2; // deprecated; should use pub_key always
    }
}

message BlockDescriptor {
    BlockchainId blockchain_id = 1;
    uint32 block_id = 2;        
}

message BlockRecord {
    bool success = 1;
    bytes record = 2; // record as it is stored in blockchain
}

message BlockChecksum {
    bool success = 1;
    uint32 block_size = 2;
    bytes checksum = 3;
}

message ManageNodeNetwork {
    enum Action {
         ADD_NODE = 0;
         REMOVE_NODE = 1;
    }
    Action action = 1;
    bytes endpoint = 2;
}

message OutboundTransactionDescriptor {
    bytes group = 1;
    .proto.Timestamp paired_transaction_id = 2;
}

// TODO: probably use BlockRecord instead
message OutboundTransaction {
    bool success = 1;
    bytes data = 2;
}

message UserDescriptor {
    bytes group_alias = 1;
    bytes pubkey = 2;
}

message TransactionRangeDescriptor {
    bytes group_alias = 1;
    uint64 start_seq_num = 2;    
}

message TransactionData {
    bool success = 1;
    bytes record = 2;
}

message CreationSumRangeDescriptor {
    UserDescriptor user = 1;
    uint32 month = 2;
    uint32 year = 3;        
}

message CreationSumData {
    bool success = 1;
    uint64 balance = 2;
}

message UserData {
    bool success = 1;
    bytes pubkey = 2;        
}

message UserBalance {
    bool success = 1;
    Amount amount = 2;
}

message Handshake0 {
    .proto.Timestamp transaction_id = 1;
    string starter_endpoint = 2;
}

message Handshake1 {
    .proto.Timestamp transaction_id = 1; // should match one from h0
    bytes pub_key = 2; // newly made key pair's pub key
}

message Handshake2 {
    .proto.Timestamp transaction_id = 1;
    bytes pub_key = 2;    
    string type = 3;
}

message Handshake3 {
    .proto.Timestamp transaction_id = 1; // should match one from h2
    bytes sb_transaction = 2; // should be signed and sent to sb
                              // ordering node
}

message HandshakeOrdering3 {
    .proto.Timestamp transaction_id = 1; // should match one from h2
    bytes sb_transaction = 2; // should be signed and sent to sb
                              // ordering node
    bytes sb_contents = 3; 
}


message BlockchainSubscription {
    bytes blockchain_pub_key = 1;
}

message LogEvent {
    string source = 1;
    .proto.Timestamp ts = 2;
    string message = 3;
    bytes data = 4;   
}

message LogResponse {
    .proto.Timestamp ts = 1; // should match request's ts
}

message OrderingRequest {
    .proto.Timestamp transaction_id = 1;
    string blockchain_pub_key = 2;
    // currently, SbTransaction or TransactionBody
    bytes data = 3; 
}

message OrderingRequestResponse {
    .proto.Timestamp transaction_id = 1;
}

message OrderedBlockchainEvent {
    .proto.Timestamp consensus_timestamp = 1;
    uint64 seq_num = 2;
    bytes running_hash = 3;
    string blockchain_pub_key = 4;
    bytes data = 5; // OrderingRequest as it is
}

message Transaction {
	uint64 version_number = 1;
    // if body_bytes is blockchain record(s), its lifetime is as follows:
    // - initially created with some fields == 0, rest set to needed
    //   values
    //   - version_number appears both inside of record and in 
    //     version_number field (as it is a generalization of format,
    //     used both for describing body_bytes type and also its
    //     interpretation while validating)
    // - signed by issuer, signature + pub key added to sigMap
    // - sent to ordering node
    // - ordering node verifies signature
    // - it sets some fields, such as seq_num
    // - it concatenates record with existing signatures, then signs it
    // - signature is added to sigMap, updated record is stored in 
    //   outbound transaction, which is sent out to recipients
    // - knowing this procedure it is always possible to validate
    //   blockchain
    // 
    // thus, following invariances:
    // - records are updated by receivers; but update cannot hide or 
    //   clear any existing data to allow signature verification later
    //   - it can add to size of body_bytes; SignaturePair has two
    //     fields which helps to track that; it is up to version
    //     handler to interpret them
    // - existing signatures are part of signature material
    //
    // those things are true when body_bytes are not blockchain records
    // as well
    bytes body_bytes = 2;
    bool success = 3; // is ignored when Transaction is request
    SignatureMap sigMap = 4; // signature material is body_bytes + 
                             // version_number + success + existing
                             // signatures
}

message Ping {
   .proto.Timestamp ts = 1;
}

message Pong {
    .proto.Timestamp ts = 1; // should match request's ts
}


// each node type supports its own set of rpcs; for sake of simplicity,
// all are presented here in a single collection
//
// a common convention is to refer those methods by exactly the same
// name in various handlers and wrappers
service GradidoNodeService {

    // Handshake0 -> Handshake1
    rpc create_node_handshake0 (Transaction) returns (stream Transaction);
    // Handshake2 -> Handshake3
    rpc create_node_handshake2 (Transaction) returns (stream Transaction);
    // Handshake2 -> HandshakeOrdering3
    rpc create_ordering_node_handshake2 (Transaction) returns (stream Transaction);

    // OrderingRequest -> OrderingRequestResponse
    rpc submit_message (Transaction) returns (stream Transaction);

    // BlockchainSubscription -> OrderedBlockchainEvent
    rpc subscribe_to_blockchain (Transaction) returns (stream Transaction);

    // LogEvent -> LogEventResponse
    rpc submit_log_message (Transaction) returns (stream Transaction);
    // Ping -> Pong
    rpc ping (Transaction) returns (stream Transaction);

    // TODO: signatures
    rpc subscribe_to_blocks (BlockDescriptor) returns (stream BlockRecord);
    rpc subscribe_to_block_checksums (BlockchainId) returns (stream BlockChecksum);
    // having stream as response for simplicity; should be non-stream; on
    // the other hand, stream with just one message of success=0 means
    // "no data", which is useful with protobuf (stream should always 
    // end with success=0; last message contents is disregarded) 
    rpc manage_group (ManageGroupRequest) returns (stream Ack);
    rpc manage_node_network (ManageNodeNetwork) returns (stream Ack);
    rpc get_outbound_transaction (OutboundTransactionDescriptor) returns (stream OutboundTransaction);

    rpc get_balance (UserDescriptor) returns (stream UserBalance);
    rpc get_transactions (TransactionRangeDescriptor) returns (stream TransactionData);
    rpc get_transactions_by_index (TransactionRangeDescriptor) returns (stream TransactionData);
    rpc get_creation_sum (CreationSumRangeDescriptor) returns (stream CreationSumData);
    rpc get_users (BlockchainId) returns (stream UserData);
}
